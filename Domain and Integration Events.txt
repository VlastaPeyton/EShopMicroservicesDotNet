Postoje 2 vrste Events:
                1) Domain Event  - Domain Event je Published(Dispatched) i Consumed(Subscribed) unutar istog service (Ordering u mom slucaju) i zato koristimo MediatR jer je unutar istog servisa. 
                                   Domain Event se Publish kad se desi modifikacija u bazi (moze i za reading from db, ali je retko).
                                   Za Domain Event kazem Dispatch(Publish)/Consume, a za Integration Event samo Publish/Consume.
                                   Imamo OrderCreatedEvent i OrderUpdatedEvent kao Domain Events def u Domain layer.
                                   DOmain Event klasa koristi Models klase a ne DTO 

                2) Integration Event - Integration Event je Published from Service1 (Basket u mom slucaju) i Consumed in Service2 (Ordering u mom slucaju). Publish-Consume(Subscribe) se radi preko Message Broker (RabbitMQ + MassTransit library). 
                
                Domain Event nasledio INotification iz MediatR, a Domain Event handler nasledio INotificaitonHandler iz MediatR. I onda kad mediator.Publish(domainEvnet) event handler automatski se aktivira
               
                Domain Event mora imati ista polja kao Integration Event, jer u RabbitMQ se mapira Integration to Domain Event

Event i event handler se radi samo za Command tj writing to DB. Moze i za QUery to DB ali retko.

OrdrerUpdatedEvent flow (Domain event only): User aktivira UpdateOrderEndpoint koji ce aktivirati UpdateOrderCommandHandler koji ce pokrenuti Update metod iz Order koji ce dodati OrderUpdatedEvent u DomainEvents listu, a onda 
                                 dBContext.Orders.Update(order) ce aktivirati DispatchDomainEventInterceptor (zbog :SaveChangesInterceptor) koji ce da pokrene mediator.Publish(domainEvent) (IDomainEvent:INotification),a taj publishing
                                 ce da aktivira OrderUpdatedEvnetHandler automatski (zbog :INotifiicationEventHandler<OrderUpdatedEvent>). OrderUpdatedEventHandler nema telo jer sam resio da je tu kraj. 
        
OrderCreatedEvent flow (integration leading to domain event): User aktivira CheckoutBasketEndpoint (koji sadrzi BasketCheckoutDTO) koji ce aktivirati CheckoutBasketCommandHandler koji ce (zbog IPublishEndpoint) koji ce da mapira BasketCheckoutDTO u BasketCheckoutEvent i  publishEndpoint.Publish(BasketCheckoutEvent), a taj
                                publishing ce da posalje BasketCheckoutEvent u RabbitMQ jer BasketCheckoutEvent: INtegrationEvent, a IntegrationEvent mora imati ista polja kao IDomainEvent jer se u RabbitMQ mapiraju. Obzirom da je Ordering.Application Consumer(Subscribed) na RabbitMQ i u MassTransit u BB je namesteno AddConsumer koje se odnosi 
                                samo na Ordering service, a BasketCheckoutEventHandler : IConsumer<BasketCheckoutEvent> i automatski se aktivira kad u RabbitMQ stigne BasketCheckoutEvent. BasketCheckoutEventHandler, mapira BasketCheckoutEvent u CreateOrderCommand kako bi, pomocu ISender, 
                                aktivirao CreateOrderCommandHandler automatski koji ce da pokrene Create metod iz Order koji ce dodati OrderCreatedEvent u DomainEvents listu , a onda dbContext.Orders.Add(order) koji ce aktivirati DispatchDomainEventInterceptor (zbog :SavingChangesInterceptor) koji ce da pokrene mediator.Publish(domainEvent) (IDomainEvent:INotification), 
                                a taj publishing ce da aktivira OrderCreatedEventHanlder automatski (zbog :INotificationEventHandler<OrderCreatedEvent>) i  onda OrderCreatedEventHandler salje OrderCreatedIntegrationEvent u RabbitMQ ako je OrderFullfilment feature ON.

Moram dodati IFeatureManager kako bih mogo tokom app running da izaberem ON/OFF  jer ne zelim da OrderCreatedEvenHandler aktivira kad client gadja CreateOrderEndpoint vec samo kad je BasketChekout 