services:
  catalog.api:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8080
      - ASPNETCORE_HTTPS_PORTS=8081
      - ConnectionStrings__Database=Server=catalogdb;Port=5432;Database=CatalogDb;User Id=postgres;Password=postgres;Include Error Detail=true
    # ConnectionStrings__Database znaci da override ConnectionStrings:Database from appsettings.json koji je connection string za Catalog.API in localhost with CatalogDB in Docker, jer catalogdb je uvek in Docker meni.
    # Mora 5432 jer to je Postgres port in  Postgres container koji DIREKTNO povezan sa catalog container jer su unutar istog docker-compose
    depends_on:
      - catalogdb
    ports:
      - "6000:8080"
      - "6060:8081"
      # levi port je port of Catalog.API docker container (6000 http, 6060 https) koji client gadja. 
      # desni port je port of Catalog.API docker container na koji se mapira levi port 
      # U Docker rezimu, Catalog.API container koristi levi port da primi sadrzaj koji mapira na desni port. Onda koristi 5432(isti port kao u localhost igrom slucaja ali je dobra praksa) da komunicira sa catalogdb container.
      # Mapiranje portova se radi jer mozda na host PC postoji neki program koji koristi 8080/8081,a proverio sam da 6000/6060 je slobodan i koristim za hosting Catalog.API u docker obliku.
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/home/app/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/home/app/.aspnet/https:ro
   
  catalogdb:
    container_name: catalogdb # From docker-compose.yml. Ovo koristim u catalog.api:environment iznad
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=CatalogDb
     # Ovo iznad je iz Catalog appsettings. Objasnjeno u appsettings.json
    restart: always
    ports:    
      - "5432:5432" 
      # levi port je Catalog u localhost rezimu.
      # desni port je docker container port of catalogdb (mora ovaj port za Postgres in Docker) kojim catalogdb komunicira sa Catalog.API koji je u localhost rezimu.
      # U localhost rezimu, Catalog.API koristi levi port da komunicira sa catalogdb container(koji koristi desni port), dok Catalog.API koristi 5000/5050 da prima http Request from client.
    volumes:
      - postgres_catalog:/var/lib/postgresql/data/
  
  basketdb:
    container_name: basketdb # From docker-compose.yml
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres 
      - POSTGRES_DB=BasketDb 
      # Ovo iznad je iz Basket appsettings. Objasnjeno kao Catalog appsettings.json
    restart: always
    ports:
      - "5433:5432" 
      # levi port je Basket u localhost rezimu.
      # desni port je docker container port of basketdb (mora ovaj port za Postgres in Docker) kojim basketdb komunicira sa Basket.API (koji je u localhost rezimu)
      # U localhost rezimu, Basket.API koristi levi port da komunicira sa basketdb container(koji koristi desni port), dok Basket.API koristi 5001/5054 da prima http Reqeust from client.
    volumes:
      - postgres_basket:/var/lib/postgresql/data/
  
  distributedcache:
    container_name: distributedcache # From docker-compose.yml
    restart: always
    ports:
      - "6379:6379"
      # levi je Basket u localhost rezimu za Redis. Uzeo sam isti port kao desni, jer mi lakse tako.
      # desni port je docker container port of distributedcache (mora ovaj port za Redis in docker) kojim distributedcache komunciira sa Basket.API (koji je u localhost rezimu)
      # U localhost rezimu, Basket.API koristi levi port da komuncira sa distributedcache(koji koristi desni port), dok Basket.API koristi 5001/5054 da prima http Request from client.
   
  orderdb: 
    container_name: orderdb # From docker-compose.yml 
    environment:
      - ACCEPT_EULA=Y 
      - SA_PASSWORD=SwN12345678 
     # OVo sam isto u appsettings stavio u Ordering
    restart: always
    ports:
      - "1434:1433" 
      # Levi je localhost, ali sam na kompu nesto zajebao pa mi je 1433 zauzet (u appsettings napisao isto), pa sam uzeo prvi slobodan, jer 1433 je default za SQL Server. 
      # Desni je docker i to je 1433 default za SQL Server (igrom slucaja je isto default i za localhost)
  
  messagebroker:
    container_name: messagebroker # From docker-compose.yml
    hostname: ecommerce-mq # Da bismo u chrome videli a mora ovo uvek 
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
     # Levi 5672 je localhost za RabbitMQ, dok desni 5672 je Docker RabbitMQ i to je default (obicno se uzimaju isti ako moze)
     # Levi 15672 je localhost za RabbitMQ Management Dashboard (otvaram ga u chrome) ,a desni 15672 je Docker 
  basket.api:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8080
      - ASPNETCORE_HTTPS_PORTS=8081
      - ConnectionStrings__Database=Server=basketdb;Port=5432;Database=BasketDb;User Id=postgres;Password=postgres;Include Error Detail=true
      # Mora 5432 jer to je Postgres port in Postgres Docker container koji DIREKTNO povezan sa basket container jer su unutar istog docker-compose
      - ConnectionStrings__Redis=distributedcache:6379   # Mora 6379 jer to je Redis port in Redis container koji direktno povezan sa basket container jer su unutar istog docker-compose
      # ConnectionStrigns__Redis znaci da override ConnectionStrings:Redis iz appsettings za Basket.API jer Redis uvek mi je u Docker i njegov port je 6379
      - ConnectionStrings__DiscountUrl=https://discount.grpc:8081 
      # Moram da override GrpcSettings:DiscountURL koje sam dodao jer Basket je gRPC Client
      # jer discount.grpc je Discount container name iz docker-compose.yml. 8081 jer Catalog.APi/Basket.API i Discount.gRPC containers koriste taj internal port a Discount.gRPC service sam stavio takodje u container sa sve njegovim SQLite
      - MessageBroker__Host=amqp://ecommerce-mq:5672 # iznad pise pa moraa ovako da se override iz appsettings
      - MessageBroker__UserName=guest # iznad pise pa moraa ovako da se override iz appsettings za basket
      - MessageBroker__Password=guest # iznad pise pa moraa ovako da se override iz appsettings za basket
    depends_on:
      - basketdb
      - distributedcache
      - discount.grpc
      - messagebroker 
    ports:
      - "6001:8080"
      - "6061:8081"
      # levi port je port of Catalog.API docker container (6000 http, 6060 https) koji client gadja. 
      # desni port je port of Catalog.API docker container na koji se mapira levi port 
      # U Docker rezimu, Catalog.API container koristi levi port da primi sadrzaj koji mapira na desni port. Onda koristi 5432(isti port kao u localhost igrom slucaja ali je dobra praksa) da komunicira sa catalogdb container.
      # Mapiranje portova se radi jer mozda na host PC postoji neki program koji koristi 8080/8081,a proverio sam da 6000/6060 je slobodan i koristim za hosting Catalog.API u docker obliku.
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/home/app/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/home/app/.aspnet/https:ro

  discount.grpc:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8080
      - ASPNETCORE_HTTPS_PORTS=8081
    ports:
      - "6002:8080"
      - "6062:8081"
      # Objasnjenje lezi u Catalog i Basket iznad
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/home/app/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/home/app/.aspnet/https:ro
  
  ordering.api:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8080
      - ASPNETCORE_HTTPS_PORTS=8081
      - ConnectionStrings__Database=Server=orderdb;Database=OrderDb;User Id=sa;Password=SwN12345678;Encrypt=False;TrustServerCertificate=True
      - MessageBroker__Host=amqp://ecommerce-mq:5672 # iznad pise pa moraa ovako da se override iz appsettings za Ordering
      - MessageBroker__UserName=guest # iznad pise pa moraa ovako da se override iz appsettings za Ordering
      - MessageBroker__Password=guest # iznad pise pa moraa ovako da se override iz appsettings za Ordering
      - FeatureManagement__OrderFullfilment=false # override from appsettings
      # Objasnjenje stoji iznad u nekom servisu
    depends_on:
      - orderdb
      - messagebroker 
    ports:
      - "6003:8080"
      - "6063:8081"
      # Objasnjenje stoji u Catalog.API 
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/home/app/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/home/app/.aspnet/https:ro

  yarpapigateway:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8080
      - ASPNETCORE_HTTPS_PORTS=8081
    ports:
      - "6004:8080"
      - "6064:8081"
      # 6004/6064 je localhost, a 8080/8081 docker container port 
    depends_on:
      - catalog.api
      - basket.api
      - ordering.api 
      # jer u appsettings/appsettings.Local u Yarp samo za ove servise sam radio, Discount ne jer njega Basket poziva (preko gRPC)
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/home/app/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/home/app/.aspnet/https:ro
